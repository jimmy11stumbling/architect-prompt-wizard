
import { AgentStatus } from "@/types/ipa-types";

export class FinalPromptGenerator {
  static async generate(agents: AgentStatus[]): Promise<string> {
    const completedAgents = agents.filter(agent => agent.status === "completed");
    
    if (completedAgents.length === 0) {
      return "No agents completed successfully. Please try again.";
    }

    const timestamp = new Date().toISOString();
    const agentOutputs = completedAgents.map(agent => ({
      name: agent.agent,
      output: agent.output || "No output provided"
    }));

    const finalPrompt = `# Intelligent Cursor AI Prompt - Generated ${timestamp}

## Project Overview
This prompt was generated by the Intelligent Prompt Architect (IPA) using advanced multi-agent processing with RAG 2.0, A2A Protocol, and MCP integration.

## Agent Collaboration Results

${agentOutputs.map(agent => `### ${agent.name}
${agent.output}

`).join('\n')}

## Implementation Guidelines

1. **RAG 2.0 Integration**: Implement retrieval-augmented generation with advanced indexing and hybrid search capabilities
2. **A2A Protocol**: Enable agent-to-agent communication for multi-agent coordination
3. **MCP Integration**: Use Model Context Protocol for standardized tool and resource access
4. **Production Ready**: Ensure scalability, error handling, and monitoring

## Technical Stack Recommendations

- Frontend: React with TypeScript, Tailwind CSS, Shadcn UI
- Backend: Node.js/Express or equivalent with proper API design
- Database: Vector database for RAG (Chroma, Pinecone, etc.)
- AI Integration: DeepSeek or compatible models with reasoning capabilities
- Monitoring: Real-time response tracking and validation

## Quality Assurance

This prompt has been validated by ${completedAgents.length} specialized agents ensuring:
- Technical accuracy
- Implementation feasibility  
- Best practices compliance
- Production readiness

Generated by IPA v2.0 - Intelligent Prompt Architect`;

    return finalPrompt;
  }

  static estimateCharacterCount(agentOutputs: any[]): string {
    const totalChars = agentOutputs.reduce((sum, output) => 
      sum + (output.output?.length || 0), 0);
    return `Estimated ${totalChars} characters`;
  }
}
