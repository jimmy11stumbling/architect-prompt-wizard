
import { AgentStatus } from "@/types/ipa-types";
import { PromptSections } from "./promptSections";
import { AgentSectionBuilder } from "./agentSectionBuilder";

export class BlueprintBuilder {
  static build(agents: AgentStatus[]): string {
    const agentOutputs = agents
      .filter(agent => agent.status === "completed" && agent.output)
      .map(agent => ({ agent: agent.agent, output: agent.output || "" }));
    
    if (agentOutputs.length === 0) {
      throw new Error("No completed agent outputs found");
    }

    const outputs = this.extractAgentOutputs(agentOutputs);
    
    return this.assembleBlueprint(outputs, agentOutputs.length, agents.length);
  }

  private static extractAgentOutputs(agentOutputs: any[]) {
    return {
      requirements: agentOutputs.find(a => a.agent === "RequirementDecompositionAgent")?.output,
      rag: agentOutputs.find(a => a.agent === "RAGContextIntegrationAgent")?.output,
      a2a: agentOutputs.find(a => a.agent === "A2AProtocolExpertAgent")?.output,
      frontend: agentOutputs.find(a => a.agent === "TechStackImplementationAgent_Frontend")?.output,
      backend: agentOutputs.find(a => a.agent === "TechStackImplementationAgent_Backend")?.output,
      cursor: agentOutputs.find(a => a.agent === "CursorOptimizationAgent")?.output,
      qa: agentOutputs.find(a => a.agent === "QualityAssuranceAgent")?.output
    };
  }

  private static assembleBlueprint(outputs: any, agentCount: number, totalAgents: number): string {
    const sections = [
      this.createHeader(agentCount),
      PromptSections.createExecutiveSummary(agentCount, totalAgents),
      PromptSections.createProjectSpecification(outputs.requirements),
      AgentSectionBuilder.buildRAGSection(outputs.rag),
      AgentSectionBuilder.buildA2ASection(outputs.a2a),
      AgentSectionBuilder.buildFrontendSection(outputs.frontend),
      AgentSectionBuilder.buildBackendSection(outputs.backend),
      AgentSectionBuilder.buildCursorSection(outputs.cursor),
      AgentSectionBuilder.buildQASection(outputs.qa),
      PromptSections.createRoadmap(),
      PromptSections.createQualityFramework(),
      PromptSections.createConclusion(agentCount, totalAgents)
    ];

    return sections.filter(Boolean).join('\n\n---\n\n');
  }

  private static createHeader(agentCount: number): string {
    return `# ðŸš€ MASTER BLUEPRINT: Complete AI-Powered Application Development Guide
*Generated by Intelligent Prompt Architect (IPA) v2.0*
*Powered by ${agentCount} Specialized AI Agents with Advanced RAG 2.0, MCP, and A2A Integration*`;
  }

  static estimateCharacterCount(agentOutputs: any[]): string {
    const baseTemplateLength = 8000;
    const agentContentLength = agentOutputs.reduce((total, agent) => total + (agent.output?.length || 0), 0);
    const totalEstimate = baseTemplateLength + agentContentLength;
    
    return totalEstimate > 10000 ? "15,000" : totalEstimate.toString();
  }
}
