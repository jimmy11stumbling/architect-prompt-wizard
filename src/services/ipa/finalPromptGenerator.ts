
import { AgentStatus } from "@/types/ipa-types";

export class FinalPromptGenerator {
  static async generate(agents: AgentStatus[]): Promise<string> {
    const agentOutputs = agents
      .filter(agent => agent.status === "completed" && agent.output)
      .map(agent => ({ agent: agent.agent, output: agent.output || "" }));
    
    if (agentOutputs.length === 0) {
      throw new Error("No completed agent outputs found");
    }
    
    // Get project overview from requirements agent
    const requirementsOutput = agentOutputs.find(a => a.agent === "RequirementDecompositionAgent");
    const ragOutput = agentOutputs.find(a => a.agent === "RAGContextIntegrationAgent");
    const a2aOutput = agentOutputs.find(a => a.agent === "A2AProtocolExpertAgent");
    const frontendOutput = agentOutputs.find(a => a.agent === "TechStackImplementationAgent_Frontend");
    const backendOutput = agentOutputs.find(a => a.agent === "TechStackImplementationAgent_Backend");
    const cursorOutput = agentOutputs.find(a => a.agent === "CursorOptimizationAgent");
    const qaOutput = agentOutputs.find(a => a.agent === "QualityAssuranceAgent");

    const finalPrompt = `# 🚀 MASTER BLUEPRINT: Complete AI-Powered Application Development Guide
*Generated by Intelligent Prompt Architect (IPA) v2.0*
*Powered by ${agentOutputs.length} Specialized AI Agents with Advanced RAG 2.0, MCP, and A2A Integration*

## 📊 EXECUTIVE SUMMARY & PROJECT VISION

This comprehensive master blueprint represents the collective expertise of ${agentOutputs.length} specialized AI agents, each contributing deep domain knowledge to ensure your project's success. This document serves as your complete roadmap for building a production-ready, scalable application with cutting-edge AI integrations.

**Implementation Confidence Level:** ${Math.round((agentOutputs.length / agents.length) * 100)}%
**Total Specialized Agent Contributions:** ${agentOutputs.length}/${agents.length}
**Estimated Development Timeline:** 6-8 weeks for full implementation
**Target Architecture:** Modern, scalable, AI-enhanced full-stack application

---

## 🎯 WHAT YOU'RE BUILDING: COMPLETE PROJECT SPECIFICATION

${requirementsOutput ? `
### 📋 Detailed Requirements Analysis & System Architecture
${requirementsOutput.output}

### 🏗️ System Architecture Overview
Based on the requirements analysis, your application will feature:

- **Frontend Architecture:** Modern, responsive web application with component-based design
- **Backend Architecture:** Scalable API-first architecture with microservices capabilities
- **Data Layer:** Optimized database design with caching strategies
- **AI Integration Layer:** Advanced RAG 2.0 and Agent-to-Agent communication systems
- **Security Layer:** Enterprise-grade authentication and authorization
- **Deployment Layer:** Cloud-native deployment with CI/CD automation

### 🎪 Core Features & Functionality Matrix
1. **User Management System**
   - Registration, authentication, and profile management
   - Role-based access control and permissions
   - User activity tracking and analytics

2. **Data Processing Engine**
   - Real-time data ingestion and processing
   - Advanced search and filtering capabilities
   - Data visualization and reporting tools

3. **AI-Powered Features**
   - Intelligent content recommendations
   - Automated data analysis and insights
   - Natural language processing capabilities

4. **Communication Systems**
   - Real-time messaging and notifications
   - Agent-to-Agent coordination protocols
   - Event-driven architecture for scalability

---
` : ""}

## 🧠 ADVANCED AI INTEGRATION STRATEGY

${ragOutput ? `
### 🔍 RAG 2.0 Implementation: Knowledge Retrieval & Enhancement
${ragOutput.output}

### 📊 RAG System Performance Targets
- **Query Response Time:** < 500ms for semantic search
- **Retrieval Accuracy:** > 95% relevance score
- **Context Window Utilization:** Optimal chunk sizing for maximum relevance
- **Embedding Model Performance:** High-dimensional vector optimization
- **Cache Hit Rate:** > 80% for frequently accessed content

### 🛠️ RAG Implementation Checklist
- [ ] Vector database schema design and optimization
- [ ] Document preprocessing and semantic chunking pipeline
- [ ] Embedding model selection and fine-tuning
- [ ] Hybrid search implementation (semantic + keyword)
- [ ] Retrieval ranking and reranking algorithms
- [ ] Context compression and relevance scoring
- [ ] Performance monitoring and optimization
- [ ] Integration testing with main application

---
` : ""}

${a2aOutput ? `
### 🤝 Agent-to-Agent Communication Protocol Design
${a2aOutput.output}

### 🌐 A2A Communication Architecture
Your application will implement a sophisticated multi-agent system with:

- **Message Routing Infrastructure:** Intelligent message distribution
- **Service Discovery Mechanisms:** Dynamic agent registration and discovery
- **Load Balancing Strategies:** Optimal request distribution across agents
- **Fault Tolerance Systems:** Automatic failover and recovery mechanisms
- **Security Protocols:** End-to-end encryption and authentication
- **Monitoring & Observability:** Real-time agent performance tracking

### 📈 A2A Performance Metrics
- **Message Throughput:** 10,000+ messages/second
- **Latency:** < 100ms for local agent communication
- **Reliability:** 99.9% message delivery success rate
- **Scalability:** Horizontal scaling to 100+ concurrent agents

---
` : ""}

## 💻 FRONTEND DEVELOPMENT BLUEPRINT

${frontendOutput ? `
### 🎨 Frontend Architecture & Implementation Strategy
${frontendOutput.output}

### 🏗️ Component Architecture Design
Your frontend will follow a modular, scalable architecture:

```
src/
├── components/           # Reusable UI components
│   ├── ui/              # Base UI library components
│   ├── forms/           # Form components and validation
│   ├── charts/          # Data visualization components
│   └── layout/          # Layout and navigation components
├── pages/               # Route-based page components
├── hooks/               # Custom React hooks
├── services/            # API and external service integrations
├── utils/               # Utility functions and helpers
├── types/               # TypeScript type definitions
└── assets/              # Static assets and resources
```

### 🎯 Frontend Development Phases
**Phase 1: Foundation (Week 1-2)**
- Project setup and configuration
- Base component library creation
- Routing and navigation implementation
- State management setup

**Phase 2: Core Features (Week 3-4)**
- User authentication UI
- Main application pages
- Data visualization components
- Real-time communication setup

**Phase 3: Advanced Features (Week 5-6)**
- AI integration interfaces
- Advanced search and filtering
- Performance optimization
- Mobile responsiveness

**Phase 4: Polish & Testing (Week 7-8)**
- UI/UX refinement
- Accessibility compliance
- Cross-browser testing
- Performance auditing

---
` : ""}

## ⚙️ BACKEND DEVELOPMENT BLUEPRINT

${backendOutput ? `
### 🛠️ Backend Architecture & Implementation Strategy
${backendOutput.output}

### 🏗️ API Architecture Design
Your backend will implement a robust, scalable API architecture:

```
src/
├── controllers/         # Request handlers and route logic
├── services/           # Business logic and external integrations
├── models/             # Data models and database schemas
├── middleware/         # Authentication, validation, logging
├── routes/             # API route definitions
├── utils/              # Utility functions and helpers
├── config/             # Configuration and environment setup
└── tests/              # Unit and integration tests
```

### 📊 Database Schema Design
**Core Entities:**
- Users (authentication, profiles, permissions)
- Content (documents, media, metadata)
- Analytics (events, metrics, insights)
- Communications (messages, notifications, logs)

**Relationships:**
- User-Content (one-to-many)
- Content-Analytics (one-to-many)
- User-Communications (many-to-many)

### 🔧 Backend Development Phases
**Phase 1: Core Infrastructure (Week 1-2)**
- Database design and migration setup
- Authentication and authorization system
- Basic CRUD operations
- Error handling and logging

**Phase 2: Business Logic (Week 3-4)**
- Advanced API endpoints
- Data processing pipelines
- Integration with external services
- Real-time communication setup

**Phase 3: AI Integration (Week 5-6)**
- RAG system implementation
- A2A communication protocols
- Machine learning model integration
- Performance optimization

**Phase 4: Production Readiness (Week 7-8)**
- Security hardening
- Performance testing
- Monitoring and alerting
- Deployment preparation

---
` : ""}

## 🎯 CURSOR AI OPTIMIZATION GUIDELINES

${cursorOutput ? `
### 🤖 AI-Assisted Development Best Practices
${cursorOutput.output}

### 📝 Cursor-Optimized Development Workflow
1. **Project Structure Optimization**
   - Clear file naming conventions for AI understanding
   - Comprehensive TypeScript definitions
   - Detailed component documentation
   - Consistent code organization patterns

2. **Code Generation Best Practices**
   - Use descriptive variable and function names
   - Include comprehensive comments for context
   - Implement proper error handling patterns
   - Follow established coding conventions

3. **AI Collaboration Strategies**
   - Break complex features into smaller, focused tasks
   - Provide clear requirements and acceptance criteria
   - Use incremental development and testing
   - Maintain clean, readable code structure

---
` : ""}

## ✅ QUALITY ASSURANCE & SECURITY FRAMEWORK

${qaOutput ? `
### 🛡️ Comprehensive Quality & Security Review
${qaOutput.output}

### 🔍 Quality Metrics & Standards
**Code Quality Targets:**
- Test Coverage: > 90%
- Code Complexity: Low to moderate
- Documentation Coverage: 100% for public APIs
- Security Vulnerabilities: Zero critical, minimal low-risk

**Performance Benchmarks:**
- Page Load Time: < 2 seconds
- API Response Time: < 500ms (95th percentile)
- Database Query Performance: < 100ms average
- Memory Usage: Optimized for production loads

---
` : ""}

## 🚀 DETAILED IMPLEMENTATION ROADMAP

### 📅 8-Week Development Timeline

#### **WEEK 1-2: PROJECT FOUNDATION**
**Backend Setup:**
- [ ] Initialize project with selected tech stack
- [ ] Configure development environment and tooling
- [ ] Set up database schema and migrations
- [ ] Implement authentication and authorization
- [ ] Create basic API endpoints and middleware
- [ ] Set up error handling and logging systems

**Frontend Setup:**
- [ ] Initialize React/Next.js project with TypeScript
- [ ] Configure styling system (Tailwind CSS + Shadcn UI)
- [ ] Set up routing and navigation structure
- [ ] Implement authentication UI components
- [ ] Create base component library
- [ ] Configure state management solution

**DevOps Setup:**
- [ ] Set up version control and branching strategy
- [ ] Configure CI/CD pipeline
- [ ] Set up development and staging environments
- [ ] Implement monitoring and alerting
- [ ] Configure security scanning and testing

#### **WEEK 3-4: CORE FEATURE DEVELOPMENT**
**Backend Development:**
- [ ] Implement core business logic and services
- [ ] Create advanced API endpoints with validation
- [ ] Set up data processing pipelines
- [ ] Implement caching strategies
- [ ] Add rate limiting and security measures
- [ ] Create comprehensive API documentation

**Frontend Development:**
- [ ] Build main application pages and workflows
- [ ] Implement user management interfaces
- [ ] Create data visualization components
- [ ] Add real-time communication features
- [ ] Implement search and filtering capabilities
- [ ] Add responsive design and mobile optimization

**Integration:**
- [ ] Connect frontend to backend APIs
- [ ] Implement error handling and user feedback
- [ ] Add loading states and performance optimization
- [ ] Set up data synchronization mechanisms

#### **WEEK 5-6: ADVANCED AI INTEGRATION**
**RAG 2.0 Implementation:**
- [ ] Set up vector database and embedding pipeline
- [ ] Implement document processing and chunking
- [ ] Create semantic search capabilities
- [ ] Add hybrid search (semantic + keyword)
- [ ] Implement retrieval ranking and optimization
- [ ] Add context compression and relevance scoring

**A2A Communication System:**
- [ ] Implement agent communication protocols
- [ ] Set up message routing and service discovery
- [ ] Add load balancing and fault tolerance
- [ ] Implement security and encryption
- [ ] Create monitoring and observability tools
- [ ] Add performance optimization features

**AI Integration:**
- [ ] Connect RAG system to main application
- [ ] Implement A2A coordination workflows
- [ ] Add intelligent recommendations
- [ ] Create automated analysis features
- [ ] Implement natural language processing

#### **WEEK 7-8: TESTING, OPTIMIZATION & DEPLOYMENT**
**Comprehensive Testing:**
- [ ] Unit tests for all critical functions
- [ ] Integration tests for API endpoints
- [ ] End-to-end tests for user workflows
- [ ] Performance and load testing
- [ ] Security vulnerability testing
- [ ] Accessibility compliance testing

**Performance Optimization:**
- [ ] Database query optimization
- [ ] Frontend performance tuning
- [ ] API response optimization
- [ ] Caching strategy refinement
- [ ] Memory usage optimization
- [ ] Network performance improvement

**Production Deployment:**
- [ ] Configure production environment
- [ ] Set up monitoring and alerting
- [ ] Implement backup and recovery procedures
- [ ] Create deployment documentation
- [ ] Perform final security audit
- [ ] Launch and monitor initial performance

---

## 📚 COMPREHENSIVE DOCUMENTATION REQUIREMENTS

### 📖 Technical Documentation
1. **API Documentation**
   - Complete endpoint documentation with examples
   - Request/response schemas with validation rules
   - Authentication and authorization requirements
   - Rate limiting and usage guidelines

2. **Database Documentation**
   - Entity relationship diagrams
   - Schema definitions and constraints
   - Index strategies and performance considerations
   - Migration and backup procedures

3. **Architecture Documentation**
   - System architecture diagrams
   - Component interaction flows
   - Data flow and processing pipelines
   - Security architecture and threat models

4. **Deployment Documentation**
   - Environment setup and configuration
   - Deployment procedures and rollback strategies
   - Monitoring and alerting configuration
   - Troubleshooting guides and runbooks

### 👥 User Documentation
1. **User Guides**
   - Feature-by-feature usage instructions
   - Workflow examples and best practices
   - Common tasks and how-to guides
   - Troubleshooting and FAQ sections

2. **Admin Documentation**
   - System administration procedures
   - User management and permissions
   - Configuration and customization options
   - Maintenance and update procedures

---

## 🛡️ SECURITY & COMPLIANCE FRAMEWORK

### 🔐 Security Implementation Checklist
- [ ] Input validation and sanitization for all user inputs
- [ ] SQL injection prevention with parameterized queries
- [ ] XSS protection with content security policies
- [ ] CSRF protection with token validation
- [ ] Authentication with secure session management
- [ ] Authorization with role-based access control
- [ ] Data encryption at rest and in transit
- [ ] Regular security audits and vulnerability assessments

### 📋 Compliance Considerations
- [ ] GDPR compliance for data privacy
- [ ] WCAG 2.1 AA accessibility standards
- [ ] SOC 2 security controls
- [ ] Industry-specific regulations (if applicable)

---

## 📊 SUCCESS METRICS & MONITORING

### 🎯 Key Performance Indicators (KPIs)
**Technical Metrics:**
- System uptime: 99.9%
- Page load time: < 2 seconds
- API response time: < 500ms (95th percentile)
- Error rate: < 1%
- Security incidents: Zero critical vulnerabilities

**User Experience Metrics:**
- User satisfaction score: > 4.5/5
- Task completion rate: > 95%
- Feature adoption rate: > 80%
- Support ticket volume: < 2% of user base

**Business Metrics:**
- User engagement and retention rates
- Feature usage analytics
- Performance and scalability metrics
- Cost optimization and efficiency gains

### 📈 Monitoring & Alerting Strategy
- Real-time application performance monitoring
- Database performance and query optimization
- Security event monitoring and alerting
- User behavior analytics and insights
- System resource utilization tracking

---

## 🎉 CONCLUSION & NEXT STEPS

This master blueprint provides a comprehensive roadmap for building your AI-powered application with cutting-edge features and enterprise-grade quality. The guidance represents the collective expertise of ${agentOutputs.length} specialized AI agents, ensuring every aspect of your project is thoroughly planned and optimized.

### 🚀 Immediate Action Items
1. **Environment Setup:** Begin with development environment configuration
2. **Team Assembly:** Gather your development team and assign responsibilities
3. **Timeline Planning:** Adapt the 8-week timeline to your specific needs
4. **Technology Validation:** Ensure all selected technologies meet your requirements
5. **Stakeholder Alignment:** Review the blueprint with all project stakeholders

### 🎯 Success Factors for Implementation
- **Follow the Phased Approach:** Implement features incrementally for better quality control
- **Prioritize Security:** Build security considerations into every development phase
- **Test Continuously:** Implement comprehensive testing at each development stage
- **Monitor Performance:** Track metrics and optimize continuously
- **Document Thoroughly:** Maintain comprehensive documentation throughout development

### 🌟 Long-term Vision
This blueprint is designed to create a scalable, maintainable, and future-ready application that can grow with your needs. The AI integration patterns and architecture decisions will position your application at the forefront of modern development practices.

**Remember:** This is more than just a development guide—it's a strategic blueprint for building the future of intelligent applications.

---

*This comprehensive master blueprint is optimized for Cursor AI and modern development workflows. For best results, implement features incrementally, test thoroughly at each stage, and maintain focus on user experience and performance optimization.*

**Total Implementation Confidence:** ${Math.round((agentOutputs.length / agents.length) * 100)}%
**Blueprint Completeness:** ${agentOutputs.length}/${agents.length} expert domains covered
**Estimated Character Count:** ${this.estimateCharacterCount(agentOutputs)}+

---

## 📞 SUPPORT & RESOURCES

For additional guidance and support during implementation:
- Review each agent's detailed specifications above
- Consult the technical documentation requirements
- Follow the security and compliance guidelines
- Monitor the success metrics throughout development

*Generated by Intelligent Prompt Architect (IPA) v2.0 - Your AI-Powered Development Partner*`;

    return finalPrompt;
  }

  private static estimateCharacterCount(agentOutputs: any[]): string {
    // Estimate character count based on agent outputs and template
    const baseTemplateLength = 8000; // Approximate template length
    const agentContentLength = agentOutputs.reduce((total, agent) => total + (agent.output?.length || 0), 0);
    const totalEstimate = baseTemplateLength + agentContentLength;
    
    return totalEstimate > 10000 ? "15,000" : totalEstimate.toString();
  }
}
