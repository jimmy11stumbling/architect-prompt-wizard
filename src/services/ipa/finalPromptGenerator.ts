
import { AgentStatus } from "@/types/ipa-types";

export class FinalPromptGenerator {
  static async generate(agents: AgentStatus[]): Promise<string> {
    const agentOutputs = agents
      .filter(agent => agent.status === "completed" && agent.output)
      .map(agent => ({ agent: agent.agent, output: agent.output || "" }));
    
    if (agentOutputs.length === 0) {
      throw new Error("No completed agent outputs found");
    }
    
    // Get project overview from requirements agent
    const requirementsOutput = agentOutputs.find(a => a.agent === "RequirementDecompositionAgent");
    const ragOutput = agentOutputs.find(a => a.agent === "RAGContextIntegrationAgent");
    const a2aOutput = agentOutputs.find(a => a.agent === "A2AProtocolExpertAgent");
    const frontendOutput = agentOutputs.find(a => a.agent === "TechStackImplementationAgent_Frontend");
    const backendOutput = agentOutputs.find(a => a.agent === "TechStackImplementationAgent_Backend");
    const cursorOutput = agentOutputs.find(a => a.agent === "CursorOptimizationAgent");
    const qaOutput = agentOutputs.find(a => a.agent === "QualityAssuranceAgent");

    const finalPrompt = `# Comprehensive Cursor AI Implementation Prompt
*Generated by Intelligent Prompt Architect (IPA) v2.0 with Advanced RAG 2.0, MCP, and A2A Integration*

## Executive Summary
This prompt has been synthesized by ${agentOutputs.length} specialized AI agents to provide comprehensive, production-ready implementation guidance. Each section represents expert-level analysis and recommendations optimized for modern development practices.

---

${requirementsOutput ? `
## üìã Project Requirements & Architecture
${requirementsOutput.output}

---
` : ""}

${ragOutput ? `
## üß† RAG 2.0 Implementation Strategy
${ragOutput.output}

---
` : ""}

${a2aOutput ? `
## ü§ù Agent-to-Agent Communication Protocol
${a2aOutput.output}

---
` : ""}

${frontendOutput ? `
## üé® Frontend Implementation Guide
${frontendOutput.output}

---
` : ""}

${backendOutput ? `
## ‚öôÔ∏è Backend Implementation Guide
${backendOutput.output}

---
` : ""}

${cursorOutput ? `
## üéØ Cursor AI Optimization Guidelines
${cursorOutput.output}

---
` : ""}

${qaOutput ? `
## ‚úÖ Quality Assurance & Security Review
${qaOutput.output}

---
` : ""}

## üöÄ Implementation Roadmap

### Phase 1: Foundation Setup (Week 1-2)
1. **Project Initialization**
   - Set up development environment with selected tech stack
   - Configure TypeScript, ESLint, and Prettier
   - Initialize version control and CI/CD pipeline
   - Set up testing framework and basic project structure

2. **Authentication & Security**
   - Implement secure authentication system
   - Set up role-based access control
   - Configure security headers and middleware
   - Establish secure credential management

### Phase 2: Core Infrastructure (Week 3-4)
1. **Database & Backend Setup**
   - Design and implement database schema
   - Create core API endpoints with proper validation
   - Set up error handling and logging systems
   - Implement rate limiting and security measures

2. **Frontend Foundation**
   - Create base component library and design system
   - Implement routing and navigation
   - Set up state management and API integration
   - Create responsive layout and UI components

### Phase 3: Advanced Features (Week 5-7)
${ragOutput ? `
1. **RAG 2.0 Implementation**
   - Set up vector database and embedding pipeline
   - Implement hybrid search with semantic and keyword matching
   - Create document processing and chunking system
   - Optimize retrieval performance and caching
` : ""}

${a2aOutput ? `
2. **Agent Communication System**
   - Implement A2A protocol and message routing
   - Set up service discovery and agent registry
   - Create real-time communication channels
   - Add error handling and fault tolerance
` : ""}

3. **Integration & Optimization**
   - Integrate all systems and test interactions
   - Implement performance monitoring and alerts
   - Optimize database queries and API responses
   - Add comprehensive error handling and user feedback

### Phase 4: Testing & Deployment (Week 8)
1. **Comprehensive Testing**
   - Unit tests for all critical functions
   - Integration tests for API endpoints
   - End-to-end tests for user workflows
   - Performance and load testing

2. **Production Deployment**
   - Configure production environment
   - Set up monitoring and alerting
   - Implement backup and recovery procedures
   - Create deployment documentation and runbooks

## üìö Documentation Requirements

### Technical Documentation
- API documentation with examples
- Database schema and relationship diagrams
- Architecture decision records (ADRs)
- Deployment and configuration guides

### User Documentation
- User guide and feature documentation
- Admin panel usage instructions
- Troubleshooting and FAQ sections
- Integration guides for external systems

## üîß Development Best Practices

### Code Quality
- Use TypeScript for type safety
- Follow consistent naming conventions
- Implement comprehensive error handling
- Add meaningful comments and documentation
- Use linting and formatting tools

### Security Considerations
- Validate all inputs and sanitize outputs
- Implement proper authentication and authorization
- Use HTTPS for all communications
- Regular security audits and updates
- Follow OWASP security guidelines

### Performance Optimization
- Implement caching strategies at multiple levels
- Optimize database queries and indexes
- Use code splitting and lazy loading
- Monitor and profile application performance
- Implement proper logging and monitoring

## üéØ Success Metrics

### Technical Metrics
- Page load time < 2 seconds
- API response time < 500ms (95th percentile)
- Database query performance < 100ms average
- 99.9% uptime and availability
- Zero critical security vulnerabilities

### User Experience Metrics
- User satisfaction score > 4.5/5
- Task completion rate > 95%
- Error rate < 1%
- Support ticket volume < 2% of user base
- Feature adoption rate > 80%

---

## üèÜ Conclusion

This comprehensive implementation prompt represents the collective expertise of specialized AI agents, each contributing deep domain knowledge to ensure your project's success. The guidance provided here follows industry best practices, modern development patterns, and proven architectural principles.

**Key Success Factors:**
- Follow the phased implementation approach
- Prioritize security and performance from day one
- Implement comprehensive testing at each stage
- Monitor and optimize continuously
- Document everything thoroughly

**Total Agent Contributions:** ${agentOutputs.length}/${agents.length} agents completed successfully
**Implementation Confidence:** ${Math.round((agentOutputs.length / agents.length) * 100)}%

*This prompt is optimized for Cursor AI and modern development workflows. For best results, implement features incrementally and test thoroughly at each stage.*`;

    return finalPrompt;
  }
}
